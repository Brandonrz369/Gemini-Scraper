While I will proceed with this approach, complex, long-running tasks can sometimes encounter unexpected situations or edge cases that might still require clarification or intervention, regardless of the approval settings. I will do my best to execute the entire sequence autonomously based on your consent.

Shall we proceed? Please ask me to "toggle to Act mode" to begin.</response>
</plan_mode_respond>

---

**User:**

[plan_mode_respond] Result:
[The user has switched to ACT MODE, so you may now proceed with the task.]
<environment_details>
# VSCode Visible Files
(No visible files)

# VSCode Open Tabs
frontend/index.html
backend/modules/request_handler.py
backend/modules/content_analyzer.py
../../Documents/Cline/MCP/perplexity-mcp/test_mcp.js
.roo/mcp.json
../../.config/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json
backend/modules/ai_handler.py
frontend/script.js
backend/config/settings.py
backend/main.py
backend/modules/output_generator.py
analyze_ab_test.py
backend/modules/state_manager.py

# Current Time
4/9/2025, 8:03:41 AM (UTC, UTC+0:00)

# Current Mode
ACT MODE
</environment_details>

---

**Assistant:**

Okay, I am now in ACT MODE and will proceed with the implementation autonomously, setting `requires_approval=false` for the planned steps.

**Step 1: Implement Checkpointing/Resumption Logic**

**1a. Modify `StateManager` to add checkpointing functions.**

I will add `get_last_completed_city` and `set_last_completed_city` methods to `backend/modules/state_manager.py`. I will also ensure the `search_scope` column migration logic added previously is still present.

```tool_code
<replace_in_file>
<path>backend/modules/state_manager.py</path>
<diff>
<<<<<<< SEARCH
        except sqlite3.Error as e:
            logging.error(f"Error initializing/migrating database schema: {e}", exc_info=True)

    def add_lead(self, lead_details, search_scope="unknown"): # Added search_scope parameter
=======
        except sqlite3.Error as e:
            logging.error(f"Error initializing/migrating database schema: {e}", exc_info=True)

    def get_last_completed_city(self):
        """Retrieves the code of the last successfully completed city."""
        if not self.conn: return None
        try:
            self.cursor.execute("SELECT value FROM progress WHERE key = 'last_completed_city'")
            result = self.cursor.fetchone()
            # Check if result is not None and access the first element
            return result[0] if result else None
        except sqlite3.Error as e:
            logging.error(f"Error getting last completed city: {e}", exc_info=True)
            return None
        except IndexError: # Handle cases where fetchone() might return an empty tuple unexpectedly
             logging.warning("IndexError while fetching last completed city likely no value set.")
             return None


    def set_last_completed_city(self, city_code):
        """Sets the code of the last successfully completed city."""
        self._set_progress_value('last_

[Response interrupted by a tool use result. Only one tool may be used at a time and should be placed at the end of the message.]

---

**User:**

[replace_in_file for 'backend/modules/state_manager.py'] Result:
The tool execution failed with the following error:
<error>
The SEARCH block:
        except sqlite3.Error as e:
            logging.error(f"Error initializing/migrating database schema: {e}", exc_info=True)

    def add_lead(self, lead_details, search_scope="unknown"): # Added search_scope parameter
...does not match anything in the file.

This is likely because the SEARCH block content doesn't match exactly with what's in the file, or if you used multiple SEARCH/REPLACE blocks they may not have been in the order they appear in the file.

The file was reverted to its original state:

<file_content path="backend/modules/state_manager.py">
# modules/state_manager.py (Recreated)
import sqlite3
import logging
import os
import json # For handling potential JSON in DB later if needed
from datetime import datetime

class StateManager:
    def __init__(self, config):
        self.db_path = config.get('STATE_CONFIG', {}).get('DATABASE_FILE', 'data/leads.db')
        # Ensure the path is relative to the backend directory
        self.backend_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        self.db_path = os.path.join(self.backend_dir, self.db_path)

        # Ensure data directory exists
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)

        self.conn = None
        self.cursor = None
        self._connect_db()
        self._initialize_schema()

    def _connect_db(self):
        """Establishes connection to the SQLite database."""
        try:
            self.conn = sqlite3.connect(self.db_path)
            # Use Row factory for dictionary-like access
            self.conn.row_factory = sqlite3.Row
            self.cursor = self.conn.cursor()
            logging.info(f"Connected to database: {self.db_path}")
        except sqlite3.Error as e:
            logging.error(f"Error connecting to database {self.db_path}: {e}", exc_info=True)
            raise # Re-raise the exception

    def _initialize_schema(self):
        """Creates necessary tables if they don't exist."""
        if not self.conn: return
        try:
            # Leads table - adjust columns as needed based on full_lead_details structure
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS leads (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    url TEXT UNIQUE NOT NULL,
                    title TEXT,
                    description TEXT,
                    city TEXT,
                    category TEXT,
                    date_posted_iso TEXT,
                    scraped_timestamp TEXT,
                    estimated_value TEXT,
                    contact_method TEXT,
                    contact_info TEXT,
                    has_been_contacted BOOLEAN DEFAULT 0,
                    follow_up_date TEXT,
                    ai_is_junk BOOLEAN,
                    ai_profitability_score INTEGER,
                    ai_reasoning TEXT,
                    search_scope TEXT  -- Added for A/B testing
                )
            ''')
            # Progress table
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS progress (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )
            ''')
            self.conn.commit()
            logging.info("Database schema initialized/verified.")

            # --- Add migration logic for existing databases ---
            # Check if the search_scope column exists
            self.cursor.execute("PRAGMA table_info(leads)")
            columns = [column[1] for column in self.cursor.fetchall()]
            if 'search_scope' not in columns:
                logging.info("Adding 'search_scope' column to existing 'leads' table...")
                self.cursor.execute("ALTER TABLE leads ADD COLUMN search_scope TEXT")
                self.conn.commit()
                logging.info("'search_scope' column added successfully.")
            # --- End migration logic ---

        except sqlite3.Error as e:
            logging.error(f"Error initializing/migrating database schema: {e}", exc_info=True)

    def get_last_completed_city(self):
        """Retrieves the code of the last successfully completed city."""
        if not self.conn: return None
        try:
            self.cursor.execute("SELECT value FROM progress WHERE key = 'last_completed_city'")
            result = self.cursor.fetchone()
            return result[0] if result else None
        except sqlite3.Error as e:
            logging.error(f"Error getting last completed city: {e}", exc_info=True)
            return None

    def set_last_completed_city(self, city_code):
        """Sets the code of the last successfully completed city."""
        self._set_progress_value('last_completed_city', city_code)

    def add_lead(self, lead_details, search_scope="unknown"): # Added search_scope parameter
        """Adds a lead to the database if the URL is unique."""
        if not self.conn:
            logging.error("Database not connected. Cannot add lead.")
            return False

        url = lead_details.get('url')
        if not url:
            logging.warning("Skipping lead: Missing URL.")
            return False

        # Flatten AI grade details
        ai_grade = lead_details.get('ai_grade', {})
        ai_is_junk = ai_grade.get('is_junk') if isinstance(ai_grade, dict) else None
        ai_score = ai_grade.get('profitability_score') if isinstance(ai_grade, dict) else None
        ai_reasoning = ai_grade.get('reasoning') if isinstance(ai_grade, dict) else None

        # Prepare data for insertion, ensuring keys match table columns
        # Use .get() with default None for safety
        data_to_insert = {
            'url': url,
            'title': lead_details.get('title'),
            'description': lead_details.get('description'),
            'city': lead_details.get('city'),
            'category': lead_details.get('category'),
            'date_posted_iso': lead_details.get('date_posted_iso'),
            'scraped_timestamp': lead_details.get('scraped_timestamp', datetime.now().isoformat()),
            'estimated_value': lead_details.get('estimated_value'),
            'contact_method': lead_details.get('contact_method'),
            'contact_info': lead_details.get('contact_info'),
            'has_been_contacted': lead_details.get('has_been_contacted', False),
            'follow_up_date': lead_details.get('follow_up_date'),
            'ai_is_junk': ai_is_junk,
            'ai_profitability_score': ai_score,
            'ai_reasoning': ai_reasoning,
            'search_scope': search_scope # Include search_scope
        }

        # Define columns explicitly for the INSERT statement
        columns = list(data_to_insert.keys())
        placeholders = ', '.join('?' * len(columns))
        sql = f"INSERT OR IGNORE INTO leads ({', '.join(columns)}) VALUES ({placeholders})"
        values = tuple(data_to_insert[col] for col in columns)

        try:
            self.cursor.execute(sql, values)
            self.conn.commit()
            # Check if a row was actually inserted (IGNORE means 0 changes if duplicate)
            if self.cursor.rowcount > 0:
                logging.debug(f"Lead added to DB: {url}")
                return True
            else:
                logging.debug(f"Lead already exists (duplicate URL): {url}")
                return False
        except sqlite3.Error as e:
            logging.error(f"Error adding lead {url} to database: {e}", exc_info=True)
            return False

    def get_leads(self):
        """Retrieves all leads from the database."""
        if not self.conn: return []
        try:
            self.cursor.execute("SELECT * FROM leads ORDER BY scraped_timestamp DESC")
            rows = self.cursor.fetchall()
            # Convert sqlite3.Row objects to dictionaries
            return [dict(row) for row in rows]
        except sqlite3.Error as e:
            logging.error(f"Error retrieving leads: {e}", exc_info=True)
            return []

    def _get_total_leads_count(self):
        """Gets the total number of leads in the database."""
        if not self.conn: return 0
        try:
            self.cursor.execute("SELECT COUNT(*) FROM leads")
            count = self.cursor.fetchone()[0]
            return count
        except sqlite3.Error as e:
            logging.error(f"Error getting lead count: {e}", exc_info=True)
            return 0

    def _set_progress_value(self, key, value):
        """Sets a progress key-value pair."""
        if not self.conn: return
        try:
            sql = "INSERT OR REPLACE INTO progress (key, value) VALUES (?, ?)"
            self.cursor.execute(sql, (key, str(value))) # Ensure value is string
            self.conn.commit()
        except sqlite3.Error as e:

</file_content>

Now that you have the latest state of the file, try the operation again with fewer/more precise SEARCH blocks.
(If you run into this error 3 times in a row, you may use the write_to_file tool as a fallback. Keep in mind, the write_to_file fallback is far from ideal, as this means you'll be re-writing the entire contents of the file just to make a few edits, which takes time and money. So let's bias towards using replace_in_file as effectively as possible)
</error>
<environment_details>
# VSCode Visible Files
backend/modules/state_manager.py

# VSCode Open Tabs
frontend/index.html
backend/modules/request_handler.py
backend/modules/content_analyzer.py
../../Documents/Cline/MCP/perplexity-mcp/test_mcp.js
.roo/mcp.json
../../.config/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json
backend/modules/ai_handler.py
frontend/script.js
backend/config/settings.py
backend/main.py
backend/modules/output_generator.py
analyze_ab_test.py
backend/modules/state_manager.py

# Current Time
4/9/2025, 8:04:08 AM (UTC, UTC+0:00)

# Current Mode
ACT MODE
</environment_details>

---

**Assistant:**

You are absolutely correct. My apologies. The error message indicates that the `replace_in_file` command failed because the file `backend/modules/state_manager.py` *already contains* the changes I was trying to make (the `get_last_completed_city` and `set_last_completed_city` methods). This means the previous edits were successful, and the file is already correctly set up for the state manager part of the checkpointing.

My mistake was trying to re-apply changes that were already present.

**Step 1b: Modify `main.py` to use the checkpointing functions.**

Now I need to modify `main.py` to:
1.  Get the last completed city from the `StateManager` at the start.
2.  Filter the list of cities to process, skipping those already completed.
3.  Save the city code as the last completed city *after* its corresponding worker process finishes successfully.

First, I'll read the current state of `main.py`.

```tool_code
<read_file>
<path>backend/main.py</path>
</read_file>
```

---

**User:**

[read_file for 'backend/main.py'] Result:
# main.py (in backend/)
import time
import sys
import os
import random
import logging
import multiprocessing
import shutil
import subprocess
import argparse
import concurrent.futures # Added for ThreadPoolExecutor
from datetime import datetime
from urllib.parse import urljoin

# --- Project Root Definition ---
project_root = os.path.dirname(os.path.abspath(__file__))
repo_root = os.path.dirname(project_root)

# --- Configure Logging ---
log_file = os.path.join(project_root, 'run.log')
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(processName)s - %(levelname)s - %(module)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, mode='w', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logging.info("Logging configured.")

logging.info("Attempting module imports...")
try:
    # Import PRE_FILTER_CONFIG as well
    from config.settings import OXYLABS_CONFIG, SEARCH_CONFIG, STATE_CONFIG, AI_CONFIG, PRE_FILTER_CONFIG
    from modules.city_manager import CityManager
    from modules.request_handler import RequestHandler
    from modules.content_analyzer import ContentAnalyzer
    from modules.state_manager import StateManager
    from modules.output_generator import OutputGenerator
    from modules.ai_handler import AIHandler
    logging.info("Module imports successful.")
except ImportError as e:
    logging.critical(f"Error importing modules: {e}", exc_info=True)
    logging.critical("Ensure you are running this script from the 'Gemini-Scraper/backend' directory")
    logging.critical("or that the necessary modules/config are in the correct subdirectories.")
    sys.exit(1)

# --- Lead Processing Helper Function (for ThreadPoolExecutor) ---
def process_single_lead(basic_lead_info, worker_request_handler, worker_content_analyzer, worker_ai_handler, worker_name):
    """Fetches details grades and prepares a single lead dictionary."""
    lead_url = basic_lead_info.get('url')
    if not lead_url:
        logging.warning(f"[{worker_name}] Skipping potential lead: Missing URL.")
        return None, None # Indicate failure/skip

    # Use different log prefix for threaded operations
    log_prefix = f"[{worker_name}-Thread]"

    # --- Add City Domain Check ---
    # Extract city code from the worker_args passed to scrape_city_worker
    # This requires modifying scrape_city_worker to pass city_code down or accessing it differently.
    # Let's modify process_single_lead signature for simplicity here.
    # We need city_code in this function scope. Let's pass it in worker_args and extract it.
    # RETHINK: Modifying scrape_city_worker args is better. Let's assume city_code is passed down.
    # We'll modify the call signature later. For now, assume city_code is available.
    # --- This approach is complex. Let's check the URL domain directly ---
    from urllib.parse import urlparse
    parsed_url = urlparse(lead_url)
    expected_domain = f"{basic_lead_info.get('city_code', 'unknown')}.craigslist.org" # Assume city_code is added to basic_lead_info
    if parsed_url.netloc != expected_domain:
        logging.warning(f"{log_prefix} Skipping lead from different city: {lead_url} (Expected domain: {expected_domain})")
        return None, None # Indicate skip

    logging.info(f"{log_prefix} Fetching lead details: {basic_lead_info.get('title', 'Untitled')} ({lead_url})")
    lead_page_html = worker_request_handler.get_page(lead_url)

    if not lead_page_html:
        logging.warning(f"{log_prefix} Failed to fetch lead detail page: {lead_url}. Skipping lead.")
        return None, None # Indicate failure/skip

    full_lead_details = worker_content_analyzer.analyze_lead_details(lead_page_html, basic_lead_info)

    # AI Grading Step
    ai_grade_result = None
    if worker_ai_handler and worker_ai_handler.client:
        logging.debug(f"{log_prefix} Sending lead to AI for grading: {lead_url}")
        ai_grade_result = worker_ai_handler.grade_lead(
            full_lead_details.get('title', ''),
            full_lead_details.get('description', '')
        )
        full_lead_details['ai_grade'] = ai_grade_result
    else:
        full_lead_details['ai_grade'] = {"is_junk": False, "profitability_score": None, "reasoning": "AI disabled"}

    # Return processed details (including grade) and the grade result separately for filtering logic
    return full_lead_details, ai_grade_result

# --- Worker Function for Parallel Processing (Refactored for Threading) ---
def scrape_city_worker(worker_args):
    """
    Worker function to scrape categories (with pagination) for a single city.
    Uses ThreadPoolExecutor to process leads found on each page in parallel.
    """
    # Unpack args (added limit_leads_per_page and search_scope)
    city_info, config, limit_pages, limit_categories, limit_leads_per_page, num_threads, search_scope = worker_args
    city_code = city_info.get('code')
    city_name = city_info.get('name', city_code)
    worker_name = multiprocessing.current_process().name
    logging.info(f"[{worker_name}] Starting worker for city: {city_name} ({city_code})")

    worker_state_manager = None
    worker_ai_handler = None
    city_leads_found_total = 0
    try:
        worker_state_manager = StateManager(config)
        worker_request_handler = RequestHandler(config['OXYLABS_CONFIG'])
        worker_content_analyzer = ContentAnalyzer(config)
        worker_ai_handler = AIHandler(config)

        if not city_code:
            logging.warning(f"[{worker_name}] Skipping city: Missing 'code' in city_info {city_info}")
            return (city_code, 0)

        # Determine categories to process
        all_categories = config['SEARCH_CONFIG'].get('CATEGORIES', [])
        categories_to_process = all_categories[:limit_categories] if limit_categories is not None else all_categories
        if limit_categories is not None:
             logging.warning(f"[{worker_name}] Limiting to first {len(categories_to_process)} categories based on --limit-categories argument.")

        for category_code in categories_to_process:
            current_page = 1
            next_page_url = f"https://{city_code}.craigslist.org/search/{category_code}"
            processed_category_leads = 0
            max_pages_to_scrape = limit_pages # Use the passed limit

            while next_page_url and current_page <= max_pages_to_scrape:
                logging.info(f"[{worker_name}] Fetching category: {category_code} (Page {current_page}/{max_pages_to_scrape}) -> {next_page_url}")
                search_page_html = worker_request_handler.get_page(next_page_url)
                if not search_page_html:
                    logging.warning(f"[{worker_name}] Failed to fetch search page {current_page} for {city_code}/{category_code}. Skipping rest of category.")
                    break

                logging.info(f"[{worker_name}] Parsing search results page {current_page} for {city_code}/{category_code}...")
                potential_leads_count_page = 0
                processed_leads_count_page = 0
                # Pass limit_leads_per_page to the parser
                leads_on_page_basic = worker_content_analyzer.parse_search_page(search_page_html, city_code, limit_leads_per_page)

                # Add city_code to each basic lead info dict for domain checking later
                leads_on_page = []
                for lead in leads_on_page_basic:
                    lead['city_code'] = city_code
                    leads_on_page.append(lead)


                # --- Pre-filter leads based on title/blacklist before AI pre-filter ---
                pre_filtered_leads_basic = []
                blacklist = config.get('PRE_FILTER_CONFIG', {}).get('BLACKLIST_TERMS', [])
                if leads_on_page:
                    potential_leads_count_page = len(leads_on_page)
                    logging.info(f"[{worker_name}] Basic Pre-filtering {potential_leads_count_page} leads from page...")
                    for lead_info in leads_on_page:
                        title = lead_info.get('title', '').lower()
                        # Basic blacklist check
                        if any(term in title for term in blacklist):
                            logging.info(f"[{worker_name}] Basic pre-filtered out (blacklist term): {lead_info.get('url')}")
                            continue # Skip this lead entirely
                        pre_filtered_leads_basic.append(lead_info)
                    logging.info(f"[{worker_name}] {len(pre_filtered_leads_basic)} leads passed basic pre-filtering.")
                else:
                    pre_filtered_leads_basic = []

                # --- AI Pre-filter remaining leads ---
                pre_filtered_leads_ai = []
                if pre_filtered_leads_basic:
                    logging.info(f"[{worker_name}] AI Pre-filtering {len(pre_filtered_leads_basic)} leads...")
                    for lead_info in pre_filtered_leads_basic:
                        title = lead_info.get('title', '')
                        # Using None for snippet as parse_search_page doesn't extract it yet
                        is_potentially_relevant = worker_ai_handler.pre_filter_lead(title, None)
                        if is_potentially_relevant:
                            pre_filtered_leads_ai.append(lead_info)
                        else:
                            logging.info(f"[{worker_name}] AI pre-filtered out (junk/unrelated): {lead_info.get('url')}")
                    logging.info(f"[{worker_name}] {len(pre_filtered_leads_ai)} leads passed AI pre-filtering.")
                else:
                     pre_filtered_leads_ai = []


                # --- Process AI-pre-filtered leads on this page in parallel using threads ---
                if pre_filtered_leads_ai:
                    logging.info(f"[{worker_name}] Processing {len(pre_filtered_leads_ai)} AI pre-filtered leads using {num_threads} threads...")
                    with concurrent.futures.ThreadPoolExecutor(max_workers=num_threads) as executor:
                        future_to_lead = {
                            executor.submit(process_single_lead, lead_info, worker_request_handler, worker_content_analyzer, worker_ai_handler, worker_name): lead_info
                            for lead_info in pre_filtered_leads_ai # Use pre_filtered_leads_ai here
                        }
                        for future in concurrent.futures.as_completed(future_to_lead):
                            original_lead_info = future_to_lead[future]
                            try:
                                full_lead_details, ai_grade_result = future.result()
                                if full_lead_details is None: continue # Skip if processing failed

                                # Add the category code to the details before saving
                                full_lead_details['category'] = category_code

                                # Add lead to DB (still done sequentially by main worker thread after thread finishes)
                                # Pass search_scope to add_lead
                                if ai_grade_result is not None and not ai_grade_result.get('is_junk', True):
                                    if worker_state_manager.add_lead(full_lead_details, search_scope=search_scope):
                                        city_leads_found_total += 1
                                        processed_leads_count_page += 1
                                        score = ai_grade_result.get('profitability_score', 'N/A')
                                        logging.info(f"[{worker_name}] Added graded lead (Score: {score}): {full_lead_details.get('url')}")
                                elif ai_grade_result and ai_grade_result.get('is_junk'):
                                    score = ai_grade_result.get('profitability_score', 'N/A')
                                    reason = ai_grade_result.get('reasoning', 'No reason provided')
                                    logging.info(f"[{worker_name}] Skipping junk lead (AI Filter Score: {score}, Reason: {reason}): {full_lead_details.get('url')}")
                                elif ai_grade_result is None and worker_ai_handler and worker_ai_handler.client:
                                     logging.error(f"[{worker_name}] Skipping lead due to AI grading failure: {full_lead_details.get('url')}")
                                elif not worker_ai_handler or not worker_ai_handler.client:
                                     # Ensure category is added even if AI is disabled
                                     full_lead_details['category'] = category_code
                                     # Pass search_scope to add_lead
                                     if worker_state_manager.add_lead(full_lead_details, search_scope=search_scope):
                                        city_leads_found_total += 1
                                        processed_leads_count_page += 1
                                        logging.info(f"[{worker_name}] Added lead (AI Disabled): {full_lead_details.get('url')}")
                            except Exception as exc:
                                lead_url = original_lead_info.get('url', 'unknown URL')
                                logging.error(f'[{worker_name}] Lead {lead_url} generated an exception during threaded processing: {exc}', exc_info=True)
                # --- End of parallel processing block ---

                logging.info(f"[{worker_name}] Page {current_page}: Parsed {potential_leads_count_page} potential leads, added {processed_leads_count_page} new graded leads for {city_code}/{category_code}.")
                processed_category_leads += processed_leads_count_page

                # Find next page link (Placeholder)
                next_page_relative = None
                if current_page < max_pages_to_scrape: pass # Keep next_page_relative as None

                if next_page_relative and current_page < max_pages_to_scrape:
                    next_page_url = urljoin(next_page_url, next_page_relative)
                    current_page += 1
                    time.sleep(random.uniform(1.0, 2.5))
                else:
                    if current_page >= max_pages_to_scrape: logging.info(f"[{worker_name}] Reached page limit ({max_pages_to_scrape}) for {city_code}/{category_code}.")
                    elif not next_page_relative and current_page < max_pages_to_scrape: logging.info(f"[{worker_name}] No next page link found for {city_code}/{category_code}.")
                    next_page_url = None # Stop pagination

            logging.info(f"[{worker_name}] Finished category {category_code} for {city_code}. Added {processed_category_leads} leads.")
            time.sleep(random.uniform(0.5, 1.5))

        logging.info(f"[{worker_name}] Finished processing {city_name}. Found {city_leads_found_total} new relevant leads in total.")
        return (city_code, city_leads_found_total)

    except Exception as e:
        logging.error(f"[{worker_name}] Error processing city {city_code}: {e}", exc_info=True)
        return (city_code, 0)
    finally:
        if worker_state_manager and worker_state_manager.conn:
            worker_state_manager.close_db()
            logging.info(f"[{worker_name}] Closed DB connection for city {city_code}.")

# --- GitHub Deployment Function ---
def deploy_to_github():
    """Adds all changes, commits, and pushes to the GitHub remote."""
    # (Deployment logic remains the same - uses environment variable)
    github_pat = os.environ.get('GITHUB_PAT')
    if not github_pat:
        logging.error("GITHUB_PAT environment variable not set. Skipping deployment.")
        return
    github_username = "Brandonrz369"
    repo_name = "Gemini-Scraper"
    logging.info(f"Attempting to commit and push changes to GitHub repo: {github_username}/{repo_name}")
    try:
        logging.info(f"Running Git commands in: {repo_root}")
        status_result = subprocess.run(['git', 'status', '--porcelain'], check=True, cwd=repo_root, capture_output=True, text=True)
        if not status_result.stdout and "graded_leads.json" not in status_result.stdout: # Check if only JSON changed potentially
             # Double check if graded_leads.json exists and was modified recently
             json_path = os.path.join(repo_root, 'frontend', 'public', 'graded_leads.json')
             if not os.path.exists(json_path):
                 logging.info("No changes detected and no JSON file found to commit.")
                 return
             # If only JSON changed git status might be empty if .gitignore ignores it, force add
             logging.info("Staging potential JSON update...")
             subprocess.run(['git', 'add', os.path.join('frontend', 'public', 'graded_leads.json')], check=True, cwd=repo_root, capture_output=True, text=True)
             # Check status again
             status_result = subprocess.run(['git', 'status', '--porcelain'], check=True, cwd=repo_root, capture_output=True, text=True)
             if not status_result.stdout:
                 logging.info("No changes detected to commit after attempting to stage JSON.")
                 return

        logging.info("Staging all changes...")
        subprocess.run(['git', 'add', '.'], check=True, cwd=repo_root, capture_output=True, text=True)
        commit_message = f"Update leads dashboard - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        logging.info(f"Committing changes with message: '{commit_message}'")
        subprocess.run(['git', 'commit', '-m', commit_message], check=True, cwd=repo_root, capture_output=True, text=True)
        logging.info("Pushing changes to remote 'origin'...")
        push_env = os.environ.copy()
        push_env['GITHUB_PAT'] = github_pat
        try:
            subprocess.run(['git', 'push', 'origin'], check=True, cwd=repo_root, capture_output=True, text=True, env=push_env)
            logging.info("Changes pushed to GitHub successfully via origin.")
        except subprocess.CalledProcessError as e_push:
             logging.warning(f"Push to origin failed (maybe auth issue?): {e_push.stderr}. Trying fallback push with PAT in URL (less secure)...")
             try:
                 authenticated_repo_url = f"https://{github_pat}@github.com/{github_username}/{repo_name}.git"
                 branch_result = subprocess.run(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], check=True, cwd=repo_root, capture_output=True, text=True)
                 current_branch = branch_result.stdout.strip()
                 subprocess.run(['git', 'push', authenticated_repo_url, current_branch], check=True, cwd=repo_root, capture_output=True, text=True)
                 logging.info("Changes pushed to GitHub successfully via authenticated URL.")
             except subprocess.CalledProcessError as e_fallback:
                  logging.error(f"Fallback Git push failed! Stderr: {e_fallback.stderr}")
             except Exception as e_fallback_unexpected:
                  logging.error(f"An unexpected error occurred during fallback GitHub push: {e_fallback_unexpected}", exc_info=True)
    except FileNotFoundError: logging.error("Git command not found. Ensure Git is installed and in PATH.")
    except subprocess.CalledProcessError as e: logging.error(f"Git operation failed! Stderr: {e.stderr}")
    except Exception as e: logging.error(f"An unexpected error during GitHub deployment: {e}", exc_info=True)

# --- Main Execution ---
def main(args):
    logging.info(f"--- Craigslist Lead Generation Agent Started (List Size: {args.list_size}) ---")
    os.chdir(project_root)
    logging.info(f"Working directory set to: {os.getcwd()}")
    # Include PRE_FILTER_CONFIG in the main config dict
    config = {
        'OXYLABS_CONFIG': OXYLABS_CONFIG,
        'SEARCH_CONFIG': SEARCH_CONFIG,
        'STATE_CONFIG': STATE_CONFIG,
        'AI_CONFIG': AI_CONFIG,
        'PRE_FILTER_CONFIG': PRE_FILTER_CONFIG
    }
    state_manager = None
    try:
        logging.info("Initializing main manager instances...")
        os.makedirs(os.path.join(project_root, 'data'), exist_ok=True)
        state_manager = StateManager(config)
        city_manager = CityManager(config, state_manager)
        output_generator = OutputGenerator(config)
        logging.info("Main manager instances initialized.")

        logging.info("Testing connection to Oxylabs...")
        # (Oxylabs check remains the same)
        temp_request_handler = RequestHandler(config['OXYLABS_CONFIG'])
        test_url = "https://newyork.craigslist.org/search/web"
        try:
            content = temp_request_handler.get_page(test_url, retry_count=1)
            if content and "craigslist" in content.lower(): logging.info("✅ Oxylabs connection successful.")
            else: logging.error("❌ Oxylabs connection failed during pre-check."); sys.exit(1)
        except Exception as e: logging.critical(f"Oxylabs connection pre-check error: {e}", exc_info=True); sys.exit(1)
        del temp_request_handler

        logging.info("--- System Status & Setup ---")
        # Determine which city list to load
        list_to_load = 'large' if args.target_cities else args.list_size
        logging.info(f"Loading city list: {list_to_load}.json")
        cities_to_process_full = city_manager.get_cities_by_population(list_to_load)
        total_cities_in_list = len(cities_to_process_full)
        logging.info(f"Loaded {total_cities_in_list} cities from {list_to_load}.json.")

        target_city_codes = None
        if args.target_cities:
            target_city_codes = [code.strip() for code in args.target_cities.split(',') if code.strip()]
            logging.info(f"Processing specific target cities based on --target-cities: {target_city_codes}")
            # Filter the full list based on the provided codes
            cities_to_process = [city for city in cities_to_process_full if city.get('code') in target_city_codes]
            # Verify all requested cities were found
            found_codes = {city.get('code') for city in cities_to_process}
            missing_codes = set(target_city_codes) - found_codes
            if missing_codes:
                logging.warning(f"Could not find the following target cities in the configured list: {missing_codes}")
        else:
            # Fallback to using the list_size if no target cities specified
            logging.info(f"No specific target cities provided. Using list size: '{args.list_size}'.")
            cities_to_process = cities_to_process_full

        total_cities_to_process = len(cities_to_process)
        logging.info(f"Will process {total_cities_to_process} cities.")
        logging.info(f"Total leads currently in database: {state_manager._get_total_leads_count()}")
        if not cities_to_process: logging.warning("No cities found to process. Exiting."); sys.exit(0)

        # Determine max pages per category based on argument or default (3)
        max_pages = args.limit_pages if args.limit_pages is not None and args.limit_pages > 0 else 3
        logging.info(f"Scraping up to {max_pages} pages per category.")

        logging.info("--- Starting Parallel Scrape ---")
        # Pool size still based on number of cities to process
        pool_size = min((os.cpu_count() or 4) * 2, total_cities_to_process) if total_cities_to_process > 0 else 1
        logging.info(f"Initializing multiprocessing pool with {pool_size} workers.")

        # Determine search scope for tagging
        if args.target_cities:
            search_scope = 'single_city' if len(target_city_codes) == 1 else 'small_region'
        else:
            # If not targeting specific cities, scope depends on how many are processed from the list size
            # For simplicity, let's default to 'list_size_run' if not specifically targeted
            search_scope = f"{args.list_size}_list" # Or determine based on len(cities_to_process) if needed

        logging.info(f"Setting search_scope tag for this run: '{search_scope}'")

        # Pass limits, leads_per_page limit, thread count, and search_scope to each worker
        worker_args_list = [(city_info, config, max_pages, args.limit_categories, args.limit_leads_per_page, args.num_threads, search_scope) for city_info in cities_to_process]
        total_leads_found_this_session = 0
        processed_cities_count = 0

        with multiprocessing.Pool(processes=pool_size) as pool:
            logging.info(f"Distributing {len(worker_args_list)} cities/tasks to workers...")
            try:
                for result in pool.imap_unordered(scrape_city_worker, worker_args_list):
                    processed_cities_count += 1
                    city_code, leads_found = result
                    if leads_found > 0: total_leads_found_this_session += leads_found
                    logging.info(f"Worker finished for {city_code}. Found {leads_found} leads. ({processed_cities_count}/{total_cities_to_process} cities complete)")
                logging.info("All workers finished.")
            except KeyboardInterrupt: logging.warning("KeyboardInterrupt received. Terminating pool..."); pool.terminate(); pool.join(); logging.warning("Pool terminated."); sys.exit(1)
            except Exception as e: logging.error(f"Error during pool execution: {e}", exc_info=True); pool.terminate(); pool.join(); sys.exit(1)

        logging.info("--- Scrape Finished ---")
        state_manager._set_progress_value("last_full_run_completed", datetime.now().isoformat())
        logging.info(f"Processed {processed_cities_count} cities.")
        logging.info(f"Found approx {total_leads_found_this_session} new leads this session.")

        all_leads = state_manager.get_leads()
        if all_leads:
            logging.info(f"Generating final reports for {len(all_leads)} total leads...")
            output_generator.generate_csv(all_leads)
            output_generator.generate_html_dashboard(all_leads)
            output_generator.generate_graded_json(all_leads)
        else:
            logging.info("No leads found in database to generate reports.")

        logging.info("--- Attempting GitHub Deployment ---")
        deploy_to_github()
        logging.info("--- Agent Finished ---")

    except Exception as e:
        logging.critical(f"An unexpected error occurred in main execution: {e}", exc_info=True)
    finally:
        if state_manager and hasattr(state_manager, 'conn') and state_manager.conn:
            logging.info("Closing main database connection...")
            state_manager.close_db()
        else:
            logging.info("Main StateManager not initialized or connection already closed.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Craigslist Lead Generation Agent")
    parser.add_argument('--list-size', type=str, choices=['small', 'medium', 'large'], default='small', help="Size of the city list to use (ignored if --target-cities is set). Default: small")
    # parser.add_argument('--limit-cities', type=int, default=None, metavar='N', help="Limit run to first N cities.") # Replaced by --target-cities
    parser.add_argument('--target-cities', type=str, default=None, metavar='city1,city2,...', help="Specify exact city codes to process (comma-separated). Overrides --list-size.")
    parser.add_argument('--limit-pages', type=int, default=None, metavar='P', help="Limit scraping to first P pages per category. Default: 3")
    parser.add_argument('--limit-categories', type=int, default=None, metavar='C', help="Limit run to first C categories per city.")
    parser.add_argument('--limit-leads-per-page', type=int, default=None, metavar='L', help="Limit processing to first L leads per search page (for testing).") # Added limit-leads-per-page
    parser.add_argument('--num-threads', type=int, default=8, metavar='T', help="Number of threads for internal lead processing. Default: 8") # Added num-threads
    args = parser.parse_args()

    logging.info("Executing main block...")
    main(args)

<environment_details>
# VSCode Visible Files
backend/modules/state_manager.py

# VSCode Open Tabs
frontend/index.html
backend/modules/request_handler.py
backend/modules/content_analyzer.py
../../Documents/Cline/MCP/perplexity-mcp/test_mcp.js
.roo/mcp.json
../../.config/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json
backend/modules/ai_handler.py
frontend/script.js
backend/config/settings.py
backend/main.py
backend/modules/output_generator.py
analyze_ab_test.py
backend/modules/state_manager.py

# Current Time
4/9/2025, 8:04:21 AM (UTC, UTC+0:00)

# Current Mode
ACT MODE
</environment_details>

---

**Assistant:**

Okay, I have the current content of `main.py`. Now I will add the logic to use the checkpointing functions from `StateManager`.

```tool_code
<replace_in_file>
<path>backend/main.py</path>
<diff>
<<<<<<< SEARCH
        logging.info(f"Total leads currently in database: {state_manager._get_total_leads_count()}")
        if not cities_to_process: logging.warning("No cities found to process. Exiting."); sys.exit(0)

        # Determine max pages per category based on argument or default (3)
=======
        logging.info(f"Total leads currently in database: {state_manager._get_total_leads_count()}")

        # --- Checkpoint/Resumption Logic ---
        last_completed_city = state_manager.get_last_completed_city()
        if last_completed_city:
            logging.warning(f"Resuming run. Last successfully completed city: {last_completed_city}")
            try:
                # Find the index of the last completed city + 1 to resume
                resume_index = [i for i, city in enumerate(cities_to_process) if city.get('code') == last_completed_city][0] + 1
                if resume_index < len(cities_to_process):
                    logging.info(f"Skipping {resume_index} already processed cities.")
                    cities_to_process = cities_to_process[resume_index:]
                else:
                    logging.info("All cities from the list were already processed in the previous run.")
                    cities_to_process = [] # No cities left to process
            except IndexError:
                logging.warning(f"Last completed city '{last_completed_city}' not found in the current list. Processing all cities.")
                # Optionally clear the invalid checkpoint: state_manager.set_last_completed_city(None)
        else:
            logging.info("Starting fresh run (no previous completed city found).")
        # --- End Checkpoint Logic ---

        total_cities_to_process = len(cities_to_process) # Recalculate after potential filtering
        logging.info(f"Will process {total_cities_to_process} cities in this run.")
        if not cities_to_process: logging.warning("No cities left to process for this run. Exiting."); sys.exit(0)

        # Determine max pages per category based on argument or default (3)
>>>>>>> REPLACE
<<<<<<< SEARCH
                    city_code, leads_found = result
                    if leads_found > 0: total_leads_found_this_session += leads_found
                    logging.info(f"Worker finished for {city_code}. Found {leads_found} leads. ({processed_cities_count}/{total_cities_to_process} cities complete)")
                logging.info("All workers finished.")
            except KeyboardInterrupt: logging.warning("KeyboardInterrupt received. Terminating pool..."); pool.terminate(); pool.join(); logging.warning("Pool terminated."); sys.exit(1)
=======
                    city_code, leads_found = result
                    if leads_found > 0: total_leads_found_this_session += leads_found
                    logging.info(f"Worker finished for {city_code}. Found {leads_found} leads. ({processed_cities_count}/{total_cities_to_process} cities complete)")
                    # --- Save progress after successful city completion ---
                    if city_code: # Ensure city_code is valid before saving progress
                         state_manager.set_last_completed_city(city_code)
                         logging.debug(f"Checkpoint saved: Last completed city set to {city_code}")
                    # --- End save progress ---
                logging.info("All workers finished.")
            except KeyboardInterrupt: logging.warning("KeyboardInterrupt received. Terminating pool..."); pool.terminate(); pool.join(); logging.warning("Pool terminated."); sys.exit(1)
>>>>>>> REPLACE
</diff>
</replace_in_file>
```

---

**User:**

[replace_in_file for 'backend/main.py'] Result:
The content was successfully saved to backend/main.py.

Here is the full, updated content of the file that was saved:

<final_file_content path="backend/main.py">
# main.py (in backend/)
import time
import sys
import os
import random
import logging
import multiprocessing
import shutil
import subprocess
import argparse
import concurrent.futures # Added for ThreadPoolExecutor
from datetime import datetime
from urllib.parse import urljoin

# --- Project Root Definition ---
project_root = os.path.dirname(os.path.abspath(__file__))
repo_root = os.path.dirname(project_root)

# --- Configure Logging ---
log_file = os.path.join(project_root, 'run.log')
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(processName)s - %(levelname)s - %(module)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, mode='w', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logging.info("Logging configured.")

logging.info("Attempting module imports...")
try:
    # Import PRE_FILTER_CONFIG as well
    from config.settings import OXYLABS_CONFIG, SEARCH_CONFIG, STATE_CONFIG, AI_CONFIG, PRE_FILTER_CONFIG
    from modules.city_manager import CityManager
    from modules.request_handler import RequestHandler
    from modules.content_analyzer import ContentAnalyzer
    from modules.state_manager import StateManager
    from modules.output_generator import OutputGenerator
    from modules.ai_handler import AIHandler
    logging.info("Module imports successful.")
except ImportError as e:
    logging.critical(f"Error importing modules: {e}", exc_info=True)
    logging.critical("Ensure you are running this script from the 'Gemini-Scraper/backend' directory")
    logging.critical("or that the necessary modules/config are in the correct subdirectories.")
    sys.exit(1)

# --- Lead Processing Helper Function (for ThreadPoolExecutor) ---
def process_single_lead(basic_lead_info, worker_request_handler, worker_content_analyzer, worker_ai_handler, worker_name):
    """Fetches details grades and prepares a single lead dictionary."""
    lead_url = basic_lead_info.get('url')
    if not lead_url:
        logging.warning(f"[{worker_name}] Skipping potential lead: Missing URL.")
        return None, None # Indicate failure/skip

    # Use different log prefix for threaded operations
    log_prefix = f"[{worker_name}-Thread]"

    # --- Add City Domain Check ---
    # Extract city code from the worker_args passed to scrape_city_worker
    # This requires modifying scrape_city_worker to pass city_code down or accessing it differently.
    # Let's modify process_single_lead signature for simplicity here.
    # We need city_code in this function scope. Let's pass it in worker_args and extract it.
    # RETHINK: Modifying scrape_city_worker args is better. Let's assume city_code is passed down.
    # We'll modify the call signature later. For now, assume city_code is available.
    # --- This approach is complex. Let's check the URL domain directly ---
    from urllib.parse import urlparse
    parsed_url = urlparse(lead_url)
    expected_domain = f"{basic_lead_info.get('city_code', 'unknown')}.craigslist.org" # Assume city_code is added to basic_lead_info
    if parsed_url.netloc != expected_domain:
        logging.warning(f"{log_prefix} Skipping lead from different city: {lead_url} (Expected domain: {expected_domain})")
        return None, None # Indicate skip

    logging.info(f"{log_prefix} Fetching lead details: {basic_lead_info.get('title', 'Untitled')} ({lead_url})")
    lead_page_html = worker_request_handler.get_page(lead_url)

    if not lead_page_html:
        logging.warning(f"{log_prefix} Failed to fetch lead detail page: {lead_url}. Skipping lead.")
        return None, None # Indicate failure/skip

    full_lead_details = worker_content_analyzer.analyze_lead_details(lead_page_html, basic_lead_info)

    # AI Grading Step
    ai_grade_result = None
    if worker_ai_handler and worker_ai_handler.client:
        logging.debug(f"{log_prefix} Sending lead to AI for grading: {lead_url}")
        ai_grade_result = worker_ai_handler.grade_lead(
            full_lead_details.get('title', ''),
            full_lead_details.get('description', '')
